import asyncio
import json
import config
import filters
from aiogram import types, Bot, Dispatcher, executor
from engine import GameEngine
from models import exceptions
from keyboards import Keyboards
from debug import Debug

app = Bot(token=config.BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot=app)

game = GameEngine(True)
kbs = Keyboards()
debugger = Debug()

@dp.message_handler(filters.isPublic(), content_types=['text'], commands=['start'])
async def start(message: types.Message):
    player_is_busy = game.is_player_busy(message.from_user.id)
    if player_is_busy:
        text = '‚ôêÔ∏è <b>–î—É—Ä–∞–∫, —Ç—ã –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª –ø—Ä–æ—à–ª—É—é –∏–≥—Ä—É!</b>'
        return await message.reply(text)

    text = '‚ùî <b>–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É?</b>'
    kb = kbs.new_game()
    await message.reply(text, reply_markup=kb)

@dp.callback_query_handler(filters.query('new_game'), filters.isPublicQuery())
async def new_game(query: types.CallbackQuery):
    data = json.loads(query.data)
    player_is_busy = game.is_player_busy(query.from_user.id)
    if player_is_busy:
        text = '‚ôêÔ∏è –î—É—Ä–∞–∫, —Ç—ã –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª –ø—Ä–æ—à–ª—É—é –∏–≥—Ä—É!'
        return await app.answer_callback_query(query.id, text, show_alert=True)

    if not query.message.reply_to_message.from_user.id == query.from_user.id:
        text = 'üö´ –ù–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞, –∏—à–∞–∫ –µ–±–∞–Ω—ã–π!'
        return await app.answer_callback_query(query.id, text, show_alert=True)

    if 'diag' not in data:
        text = '<b>–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è, —à–∞–∫–∞–ª –µ–±–∞–Ω—ã–π</b> ‚§µÔ∏è'
        kb = kbs.new_game_categories()
        return await app.edit_message_text(text, query.message.chat.id, query.message.message_id, reply_markup=kb)

    text = f'‚ùî <b>–ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–≥—Ä—É –æ—Ç –¥–µ–±–∏–ª–∞?</b>\n\n<b>–ü–æ–ª–µ</b>: <code>{data["diag"]}x{data["diag"]}</code>'
    kb = kbs.accept_game_keyboard(board=data['diag'])
    await app.edit_message_text(text, query.message.chat.id, query.message.message_id, reply_markup=kb)

@dp.callback_query_handler(filters.query('accept_game'), filters.isPublicQuery())
async def accept_game(query: types.CallbackQuery):
    data = json.loads(query.data)

    if query.message.reply_to_message.from_user.id == query.from_user.id:
        text = 'üö´ –î–æ–ª–±–æ–µ–±, —Ç—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –≤—Å–µ–º –∏–≥—Ä–∞—Ç—å...'
        return await app.answer_callback_query(query.id, text, show_alert=True)

    game_object, database_id = game.new_game([query.from_user.id, query.message.reply_to_message.from_user.id], data['diag'])

    text = f'''
üí¨ <b>–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>
    
‚ö∞Ô∏è <b>–ü–æ–ª–µ</b>: <code>{data['diag']}x{data['diag']}</code>
    
üë§ <b>–ò–≥—Ä–æ–∫–∏</b>:
‚îú {query.message.reply_to_message.from_user.first_name}
‚îî {query.from_user.first_name}
    '''

    kb = kbs.board_keyboard(database_id, game_object.board)
    await app.edit_message_text(text, query.message.chat.id, query.message.message_id, reply_markup=kb)


@dp.callback_query_handler(filters.query('select'), filters.isPublicQuery())
async def select_cell(query: types.CallbackQuery):
    data = json.loads(query.data)
    await asyncio.sleep(1.2)

    try:
        game_data = game.get_game_from_database(id=data['id'])
        game.select(game_data.game_id, query.from_user.id, data['pos'])
        winner = game.get_winner(game_data.game_id)

        if winner:
            winner_chat = (await app.get_chat(winner))
            text = f'üí¨ <b>–í—ã–∏–≥—Ä–∞–ª</b>: {winner_chat.first_name}'
            return await app.edit_message_text(text, query.message.chat.id, query.message.message_id, reply_markup=None)

        is_draw = game.is_draw(game_data.game_id)
        if is_draw:
            text = "ü§∑üèø‚Äç‚ôÇÔ∏è <b>–ù—É –µ–±–∞—Ç—å –Ω–∏—á—å—è, —Ö—É–ª–∏...</b>\n\n–° –¥–æ—Ä–æ–≥–∏ —à–ª–µ–Ω–¥—Ä—ã!"
            return await app.edit_message_text(text, query.message.chat.id, query.message.message_id, reply_markup=None)

        game_data = game.get_game(game_data.game_id)
        kb = kbs.board_keyboard(data['id'], game_data.board)
        return await app.edit_message_reply_markup(query.message.chat.id, query.message.message_id, reply_markup=kb)

    except exceptions.BoardCellAlreadySelected:
        text = 'üö´ –Ø—á–µ–π–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, –º—Ä–∞–∫–æ–±–µ—Å!'
        return await app.answer_callback_query(query.id, text, show_alert=True)

    except exceptions.BoardCellNotFound:
        text = 'üö´ –ù–µ—Ç —Ç–∞–∫–æ–π —è—á–µ–π–∫–∏, –¥–æ–¥–∏–∫...'
        return await app.answer_callback_query(query.id, text, show_alert=True)

    except exceptions.PlayerAlreadySteppedException:
        text = 'üö´ –¢—ã —É–∂–µ –ø–æ—Ö–æ–¥–∏–ª, –∏—à–∞–∫!'
        return await app.answer_callback_query(query.id, text, show_alert=True)

    except exceptions.PlayerNotInGameException:
        text = 'üö´ –¢—ã –Ω–µ –∏–≥—Ä–∞–µ—à—å –≤ —ç—Ç—É –∫–∞—Ç–∫—É, –¥–µ–±–∏–ª...'
        return await app.answer_callback_query(query.id, text, show_alert=True)

    except exceptions.GameNotFoundException:
        text = 'üö´ –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£–ø—Å–∏ –≤—É–ø—Å–∏, —É–±–ª—é–¥–æ–∫...'
        return await app.answer_callback_query(query.id, text, show_alert=True)

    except Exception as e:
        debugger.exception(e)
        text = 'üö´ –û—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞... –ù—É –ø–æ—Ç–æ–º –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É ('
        return await app.answer_callback_query(query.id, text, show_alert=True)

if __name__ == "__main__":
    executor.start_polling(dp, fast=True)
